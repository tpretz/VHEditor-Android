apply plugin: 'com.android.application'

apply plugin: "com.facebook.react"
apply plugin: 'kotlin-android'

def bootstrapVersion = "bootstrap-2024.10.05-r1+apt-android-7"
def bootstrapHashes = parseHashes("""
df938025f4fa75477145af3fd0ca39c416a348f09fcde4e24ad329ab02b15575  bootstrap-aarch64.zip
b9a119cd2bb810f50d25810d956fa9fd800abdc6cfdfb344daadee05b862983d  bootstrap-arm.zip
d67740bf72c1b62029fbf67bb3cdd5b07a3dbf4e98231273bdbeb38d48eabf75  bootstrap-i686.zip
33bb1d1b9d1ea7bfdf1893de64f81cbcb6c728e8325a6e97d632c20d141b9f01  bootstrap-x86_64.zip
""")
def csVersion = "cs-2024.10.05-r1"
def csHashes = parseHashes("""
3ebda09b2a28a54920ea0501791e2043584c6ea7ed2832b6e8a96ad1add75451  cs-aarch64.tgz
a91d1a54dafd8bb25aa0a6b41fc9bc2c07782fa46c1949b36e1957ec6b00b937  cs-arm.tgz
c770e80797732da08a95d41b0f2e634dc9abc2465b073f44bedd14effa993a21  cs-x86.tgz
5d80ea78fef5bf46f9f186382b297d0f345a49415976ea3769b3116a5c83b74e  cs-x86_64.tgz
""")

def packageJsonFile = new File(projectDir, "../package.json")
def packageJson = new groovy.json.JsonSlurper().parseText(packageJsonFile.text)

react {
    cliFile = file("${rootProject.ext.rootDir}/node_modules/react-native/cli.js")
    root = file("${rootProject.ext.rootDir}")
//    jsRootDir = file("../Libraries")
    reactNativeDir = file("${rootProject.ext.rootDir}/node_modules/react-native")
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion

    dexOptions {
        javaMaxHeapSize "4G"
    }

    defaultConfig {
        applicationId "vn.vhn.vsc"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        if (System.env['GPLAY_BUILD'] == '1') {
            buildConfigField "Boolean", "GOOGLEPLAY_BUILD", "true"
            defaultConfig.targetSdkVersion 30 // google play require minimum version to be 30
        } else {
            buildConfigField "Boolean", "GOOGLEPLAY_BUILD", "false"
            defaultConfig.targetSdkVersion 30 // Dont update - /data/data no longer executable
        }
        versionCode packageJson.config.versionCode
        versionName System.getenv("CI_VERSION_NAME") ?: "git describe --tags --abbrev=0".execute().text.trim()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            if (System.env['GPLAY_BUILD'] != '1' && System.env['CI_BUILD'] != '1') {
                abiFilters 'arm64-v8a'
            } else if (System.env['USE_SPLITBUILD'] != '1') {
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        }

        buildConfigField "String", "BOOTSTRAP_VERSION", "\"${bootstrapVersion}\""
        buildConfigField "String", "CS_VERSION", "\"${csVersion}\""
    }

    if (System.env['USE_SPLITBUILD'] == '1') {
        splits {
            abi {
                enable true
                reset()
                include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
                universalApk false
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
        release {
            storeFile file('keystore')
            keyAlias 'alias'
            storePassword '123456'
            keyPassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    externalNativeBuild {
//        ndkBuild {
//            path "src/main/cpp/Android.mk"
//        }
        cmake {
            path file("src/main/cpp/CMakeLists.txt")
        }
    }
    lint {
        lintConfig file('../lint.xml')
    }
    namespace 'vn.vhn.vhscode'
    buildFeatures {
        viewBinding true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    applicationVariants.all { variant ->
        if (variant.name == 'debug') {
            variant.outputs.each { output ->
                output.versionCodeOverride = 999999999
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.core:core-ktx:${project.properties.androidxVersion}"
    implementation "androidx.activity:activity-ktx:${project.properties.androidxVersion}"
    implementation "androidx.fragment:fragment-ktx:${project.properties.androidxVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.github.Dimezis:BlurView:version-2.0.0'

    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'


    implementation "com.facebook.react:react-android"
    if (hermesEnabled.toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation "org.webkit:android-jsc:+"
    }


    api project(':termux-shared')
    api project(':terminal-emulator')
    api project(':terminal-view')
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    implementation 'me.jfenn:crasher:0.0.2'
}

clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}

def downloadRemoteArchive(String arch, String localUrl, String remoteUrl, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = String.format("%1\$64s", new BigInteger(1, digest.digest()).toString(16)).replace(' ', '0')
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl)
            file.delete()
        }
    }

    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    if (checksum != expectedChecksum.replaceAll("^0+", "")) {
        file.delete()
        throw new Exception("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    downloadRemoteArchive(
            arch,
            "src/main/cpp/bootstrap-" + arch + ".zip",
            "https://github.com/vhqtvn/termux-packages/releases/download/" + version + "/bootstrap-" + arch + ".zip",
            expectedChecksum,
            version
    )
}

def downloadCodeServer(String arch, String expectedChecksum, String version) {
    downloadRemoteArchive(
            arch,
            "src/main/cpp/cs-" + arch + ".tgz",
            "https://github.com/vhqtvn/vscode-android-server/releases/download/" + version + "/cs-" + arch + ".tgz",
            expectedChecksum,
            version
    )
}

def parseHashes(String hashesStr) {
    Map<String, String> m = [:]
    for (String line in hashesStr.trim().split("\n")) {
        String[] parts = line.trim().split(" +")
        m[parts[1].trim()] = parts[0].trim()
    }
    return m
}

task downloadBootstraps() {
    doLast {
        downloadBootstrap("aarch64", bootstrapHashes["bootstrap-aarch64.zip"], bootstrapVersion)
        downloadBootstrap("arm", bootstrapHashes["bootstrap-arm.zip"], bootstrapVersion)
        downloadBootstrap("i686", bootstrapHashes["bootstrap-i686.zip"], bootstrapVersion)
        downloadBootstrap("x86_64", bootstrapHashes["bootstrap-x86_64.zip"], bootstrapVersion)

        downloadCodeServer("aarch64", csHashes["cs-aarch64.tgz"], csVersion)
        downloadCodeServer("arm", csHashes["cs-arm.tgz"], csVersion)
        downloadCodeServer("x86", csHashes["cs-x86.tgz"], csVersion)
        downloadCodeServer("x86_64", csHashes["cs-x86_64.tgz"], csVersion)
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}

apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

